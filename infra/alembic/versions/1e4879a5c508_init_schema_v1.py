"""init schema v1

Revision ID: 1e4879a5c508
Revises:
Create Date: 2025-10-24 22:37:09.544522
"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


import pgvector.sqlalchemy  # or: from pgvector.sqlalchemy import Vector

# revision identifiers, used by Alembic.
revision: str = "1e4879a5c508"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""

    # âœ… ensure required extensions exist (idempotent)
    op.execute("CREATE EXTENSION IF NOT EXISTS vector")
    op.execute("CREATE EXTENSION IF NOT EXISTS unaccent")
    op.execute("CREATE EXTENSION IF NOT EXISTS pg_trgm")

    # --- autogenerated tables/indexes ---
    op.create_table(
        "documents",
        sa.Column("doc_id", sa.UUID(), nullable=False),
        sa.Column("source_uri", sa.Text(), nullable=False),
        sa.Column("mime_type", sa.Text(), nullable=False),
        sa.Column("sha256", postgresql.BYTEA(), nullable=False),
        sa.Column("title", sa.Text(), nullable=True),
        sa.Column("language", sa.Text(), nullable=True),
        sa.Column("is_scanned", sa.Boolean(), server_default=sa.text("FALSE"), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.PrimaryKeyConstraint("doc_id"),
    )

    op.create_table(
        "chunks",
        sa.Column("chunk_id", sa.UUID(), nullable=False),
        sa.Column("doc_id", sa.UUID(), nullable=False),
        sa.Column("page_no", sa.Integer(), nullable=False),
        sa.Column("object_type", sa.String(), nullable=False),
        sa.Column("section_path", sa.Text(), nullable=True),
        sa.Column("bbox", sa.JSON(), nullable=True),
        sa.Column("text", sa.Text(), nullable=False),
        sa.Column(
            "text_fts",
            postgresql.TSVECTOR(),
            nullable=False,
        ),
        sa.Column("emb_v1", pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
        sa.Column("emb_model", sa.Text(), nullable=True),
        sa.Column("emb_version", sa.Text(), nullable=True),
        sa.Column("chunk_version", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(["doc_id"], ["documents.doc_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("chunk_id"),
    )
    # Maintain text_fts via trigger to avoid immutability restrictions on generated columns
    op.execute(
        """
        CREATE FUNCTION chunks_fts_trigger() RETURNS trigger LANGUAGE plpgsql AS $$
        BEGIN
          NEW.text_fts := to_tsvector('simple'::regconfig, unaccent(coalesce(NEW.text,'')));
          RETURN NEW;
        END$$;
        """
    )
    op.execute(
        """
        CREATE TRIGGER trg_chunks_fts BEFORE INSERT OR UPDATE ON chunks
        FOR EACH ROW EXECUTE FUNCTION chunks_fts_trigger();
        """
    )
    op.create_index("idx_chunks_doc_page", "chunks", ["doc_id", "page_no"], unique=False)
    op.create_index(
        "idx_chunks_emb_v1",
        "chunks",
        ["emb_v1"],
        unique=False,
        postgresql_using="hnsw",
        postgresql_ops={"emb_v1": "vector_cosine_ops"},
    )
    op.create_index("idx_chunks_fts", "chunks", ["text_fts"], unique=False, postgresql_using="gin")
    op.create_index(op.f("ix_chunks_doc_id"), "chunks", ["doc_id"], unique=False)

    op.create_table(
        "pages",
        sa.Column("doc_id", sa.UUID(), nullable=False),
        sa.Column("page_no", sa.Integer(), nullable=False),
        sa.Column("text", sa.Text(), nullable=True),
        sa.Column("image_uri", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(["doc_id"], ["documents.doc_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("doc_id", "page_no"),
    )


def downgrade() -> None:
    """Downgrade schema."""
    op.drop_table("pages")
    op.drop_index(op.f("ix_chunks_doc_id"), table_name="chunks")
    op.drop_index("idx_chunks_fts", table_name="chunks", postgresql_using="gin")
    op.drop_index(
        "idx_chunks_emb_v1",
        table_name="chunks",
        postgresql_using="hnsw",
        postgresql_ops={"emb_v1": "vector_cosine_ops"},
    )
    op.drop_index("idx_chunks_doc_page", table_name="chunks")
    op.execute("DROP FUNCTION IF EXISTS chunks_fts_trigger()")
    op.drop_table("chunks")
    op.drop_table("documents")
